#include <vcl.h>
#pragma hdrstop

#include "IHMfour.h"
#include "TCPserver.h"
#include "four.h"
#include "main.cpp"
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"
TForm1 *Form1;
//---------------------------------------------------------------------------
__fastcall TForm1::TForm1(TComponent* Owner)
	: TForm(Owner)
{
	FOUR = new four(); //nouvel objet four
	Timer1->Enabled=true;  //Active Le timer1
	volt=2;
}

//---------------------------------------------------------------------------

void __fastcall TForm1::Timer1Timer(TObject *Sender)
{
   temperature = FOUR->Lecture(); //stockage dans la variable 'temperature'

   LblTemp->Caption =  temperature;  //affichage de la température

}

//---------------------------------------------------------------------------

void __fastcall TForm1::Timer2Timer(TObject *Sender)
{
	temperature = LblTemp->Caption.ToInt();
	FOUR->Ecriture(volt); //ecriture


	if(temperature-2>Tcom)
	{
		volt=0;  //Met le voltage a 0
	}
	if(temperature<Tcom)
	{
		volt=10; //On chauffe
	}

	GraphTemp->Series[0]->Add(temperature); //affichage du graphique de la température
}
//---------------------------------------------------------------------------


void __fastcall TForm1::BtnArretClick(TObject *Sender)
{

	FOUR->Ecriture(0); //on met le voltage à 0V pour arreter de chauffer
	Timer2->Enabled=false;

}
//---------------------------------------------------------------------------


void __fastcall TForm1::BtnStartClick(TObject *Sender)
{
	Timer2->Enabled=true;
	Tcom = EditTemp->Text.ToInt(); //ecriture du pourcentage en V


    	TCPserver *TCPs = new TCPserver();
	bool TCPser = TCPs->TCPconnexion(203);
	char buf[60] = {0};
	char test[60] = {0};
	char *sendbuf = "45";
	int x;

    TCPser = TCPs->TCPWaitConnexion();

			if (TCPser == true)
			{
				cout << "connexion du client"<<endl;
			}

		do
		{
			for ((x = 0); x < strlen(buf); x++)
			{
			  test[x] = buf[x];
			}

			TCPser = TCPs->TCPWaitConnexion();



			TCPs->TCPsend(sendbuf);

			TCPs->TCPrecv(buf, 2);

			if ( buf[0] != '\n')
			{
				if( test[0] != buf [0] || test[1] != buf [1] )
				{
				  cout <<buf<<endl;
				}

			}


            TCPs->TCPclose();

		} while (TCPser == true);

}
//---------------------------------------------------------------------------





